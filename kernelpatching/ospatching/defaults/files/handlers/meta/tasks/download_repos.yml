---
    - name: Stop guardian service
      service:
        name: guardian
        state: stopped
      ignore_errors: yes
      tags: updates

    - name: Create reports directory
      file:
        path: ~/patching_reports 
        state: directory
        mode: '0755'
      tags: reports

    - name: Delete old reports files
      args:
        warn: false
      shell: /bin/rm -f ~/patching_reports/*
      tags: reports

    - name: Create new reports files
      file:
        path: ~/patching_reports/alvaria_updates{{ item }}
        state: touch
        mode: '0666'
      with_items:
        - -a.tmp
        - -b.tmp
        - .report.body
        - .report.header
        - .report
      tags: reports

    - name: Download CentOS repos
      yum:
        name: https://atllxyum1.noblesys.com/alvaria-release-latest.rpm
        state: latest
        validate_certs: no
      when: ansible_facts['distribution'] == "CentOS"
      tags: repos

    - name: Delete old repository backup if present
      file:
        path: /etc/yum.repos.d.bak
        state: absent
      when: ansible_facts['distribution'] == "RedHat"

    - name: Backup directory /etc/yum.repos.d into /etc/yum.repos.d.bak
      args:
        warn: false
      shell: /bin/cp -a /etc/yum.repos.d /etc/yum.repos.d.bak
      when: ansible_facts['distribution'] == "RedHat"

    - name: Delete old repositories
      args:
        warn: false
      shell: /bin/rm -f /etc/yum.repos.d/*
      when: ansible_facts['distribution'] == "RedHat"

    - name: Download RHEL repo
      get_url:
        url: https://atllxyum1.noblesys.com/repo/rhel/alvaria-rhel.repo
        dest: /etc/yum.repos.d
        mode: '0755'
      when: ansible_facts['distribution'] == "RedHat"
      tags: repos

    - name: Set kernel retention to 2 versions
      lineinfile:
        path: /etc/yum.conf
        regexp: '^installonly_limit=(.*)'
        line: 'installonly_limit=2'
        backrefs: yes
      tags: updates

    - name: Run yum clean all
      args:
        warn: false
      command: yum --enablerepo="*" clean all
      tags: updates

    - name: Create report header
      shell: |
        echo "Alvaria OS Patching Report" > ~/patching_reports/alvaria_updates.report.header
        echo "--------------------------------" >> ~/patching_reports/alvaria_updates.report.header
        echo "Date          : `date`" >> ~/patching_reports/alvaria_updates.report.header
        echo "Machine       : ${HOSTNAME}" >> ~/patching_reports/alvaria_updates.report.header
        echo " " >> ~/patching_reports/alvaria_updates.report.header
        echo "Starting OS Version    : `cat /etc/redhat-release`" >> ~/patching_reports/alvaria_updates.report.header
        echo "Starting Kernel Version: `uname -r`" >> ~/patching_reports/alvaria_updates.report.header
        echo " " >> ~/patching_reports/alvaria_updates.report.header
      tags: reports

    - name: Generate list of packages and their version numbers for updates
      args:
        warn: False
      shell: |
        /usr/bin/yum list updates|egrep ".i386|.i686|.x86_64|.noarch|.src"|sed "s/.i386//"|sed "s/.noarch//"|sed "s/.x86_64//"|sed "s/.src//"|grep -v Excluding > ~/patching_reports/alvaria_updates-a.tmp
        cat ~/patching_reports/alvaria_updates-a.tmp|awk '{ print $1 } ' > ~/patching_reports/alvaria_updates-b.tmp
   
    - name: Count packages
      shell: cat ~/patching_reports/alvaria_updates-a.tmp|wc -l
      register: package_count
      tags: updates

    - name: Create report body
      shell: |
        echo "PACKAGES TO BE UPDATED" >> ~/patching_reports/alvaria_updates.report.body
        echo "----------------------" >> ~/patching_reports/alvaria_updates.report.body
        cat ~/patching_reports/alvaria_updates-b.tmp
      register: package_name
      when: package_count.stdout | int > 0
      tags: reports

    - name: Populate report body with package names and versions
      shell: |
        echo -e "Package: {{ item }}\nCurrent Version: `rpm -q --queryformat '%{VERSION}-%{RELEASE}\n' {{ item }}|tail -1`  New Version: `cat ~/patching_reports/alvaria_updates-a.tmp|grep -w {{ item }}|head -1|awk '{ print $2 } '`\n" >> ~/patching_reports/alvaria_updates.report.body
      loop: "{{ package_name.stdout_lines }}"
      when: package_count.stdout | int > 0
      changed_when: False
      tags: reports

    - name: Populate report body if no updates available
      shell: echo "SYSTEM UP TO DATE - NO UPDATES AVAILABLE" >> ~/patching_reports/alvaria_updates.report.body
      when: package_count.stdout | int == 0
      tags: reports

